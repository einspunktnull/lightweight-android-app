package net.einspunktnull.lightweight.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import net.einspunktnull.lightweight.greenDao.Entry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ENTRY.
*/
public class EntryDao extends AbstractDao<Entry, Long> {

    public static final String TABLENAME = "ENTRY";

    /**
     * Properties of entity Entry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, long.class, "date", false, "DATE");
        public final static Property Carb = new Property(2, int.class, "carb", false, "CARB");
        public final static Property Fat = new Property(3, int.class, "fat", false, "FAT");
        public final static Property Water = new Property(4, int.class, "water", false, "WATER");
        public final static Property Sport = new Property(5, int.class, "sport", false, "SPORT");
        public final static Property Weight = new Property(6, float.class, "weight", false, "WEIGHT");
    };


    public EntryDao(DaoConfig config) {
        super(config);
    }
    
    public EntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ENTRY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DATE' INTEGER NOT NULL ," + // 1: date
                "'CARB' INTEGER NOT NULL ," + // 2: carb
                "'FAT' INTEGER NOT NULL ," + // 3: fat
                "'WATER' INTEGER NOT NULL ," + // 4: water
                "'SPORT' INTEGER NOT NULL ," + // 5: sport
                "'WEIGHT' REAL NOT NULL );"); // 6: weight
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_ENTRY_DATE ON ENTRY" +
                " (DATE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ENTRY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Entry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDate());
        stmt.bindLong(3, entity.getCarb());
        stmt.bindLong(4, entity.getFat());
        stmt.bindLong(5, entity.getWater());
        stmt.bindLong(6, entity.getSport());
        stmt.bindDouble(7, entity.getWeight());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Entry readEntity(Cursor cursor, int offset) {
        Entry entity = new Entry( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // date
            cursor.getInt(offset + 2), // carb
            cursor.getInt(offset + 3), // fat
            cursor.getInt(offset + 4), // water
            cursor.getInt(offset + 5), // sport
            cursor.getFloat(offset + 6) // weight
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Entry entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.getLong(offset + 1));
        entity.setCarb(cursor.getInt(offset + 2));
        entity.setFat(cursor.getInt(offset + 3));
        entity.setWater(cursor.getInt(offset + 4));
        entity.setSport(cursor.getInt(offset + 5));
        entity.setWeight(cursor.getFloat(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Entry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Entry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
